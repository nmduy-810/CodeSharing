{"version":3,"file":"default-node_modules_ng-zorro-antd___ivy_ngcc___fesm2015_ng-zorro-antd-checkbox_js.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAmC;AAC0B;AACE;AACyI;AACxI;AACjC;AACY;AACY;AACR;;AAE/C;AACA;AACA;AACA;AACwC;AACI;AACA;AACH;AACC;;AAE1C;AACA;AACA;AACA,8DAA8D;AAC9D,gBAAgB,8DAAuB;AACvC,IAAI,4DAAqB;AACzB,IAAI,wDAAiB,kHAAkH,oBAAoB,2DAAoB,OAAO,oCAAoC,eAAe,2DAAoB,IAAI,8CAA8C;AAC/S,IAAI,4DAAqB;AACzB,IAAI,oDAAa;AACjB,IAAI,0DAAmB;AACvB,EAAE;AACF;AACA,mBAAmB,2DAAoB;AACvC,IAAI,wDAAiB;AACrB,IAAI,uDAAgB;AACpB,IAAI,+DAAwB;AAC5B;AACA;AACA;AACA,8BAA8B,uDAAY;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mFAAmF,6CAA6C,+DAAwB,CAAC,oDAAgB,GAAG,+DAAwB,CAAC,qDAAiB;AACtN,gDAAgD,+DAAwB,GAAG,mFAAmF,0BAA0B,iJAAiJ;AACzU,QAAQ,6DAAsB;AAC9B,QAAQ,0DAAmB;AAC3B,OAAO,wCAAwC;AAC/C;AACA,MAAM,MAAM,oDAAS,EAAE;AACvB,MAAM,MAAM,qDAAU;AACtB;AACA;AACA,mBAAmB,MAAM,iDAAM,EAAE;AACjC;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,yCAAO;AACnC;AACA;AACA,mCAAmC,uDAAY;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,yDAAS;AAC3B;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,uFAAuF,yD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","sources":["./node_modules/ng-zorro-antd/__ivy_ngcc__/fesm2015/ng-zorro-antd-checkbox.js"],"sourcesContent":["import { __decorate } from 'tslib';\nimport { FocusMonitor, A11yModule } from '@angular/cdk/a11y';\nimport { Directionality, BidiModule } from '@angular/cdk/bidi';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Renderer2, ElementRef, Output, forwardRef, Optional, ChangeDetectorRef, ViewChild, Input, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, FormsModule } from '@angular/forms';\nimport { Subject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { InputBoolean } from 'ng-zorro-antd/core/util';\nimport { CommonModule } from '@angular/common';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/a11y';\nimport * as ɵngcc2 from '@angular/cdk/bidi';\nimport * as ɵngcc3 from '@angular/forms';\nimport * as ɵngcc4 from '@angular/common';\n\nconst _c0 = [\"*\"];\nconst _c1 = [\"inputElement\"];\nconst _c2 = [\"nz-checkbox\", \"\"];\nfunction NzCheckboxGroupComponent_label_0_Template(rf, ctx) { if (rf & 1) {\n    const _r3 = ɵngcc0.ɵɵgetCurrentView();\n    ɵngcc0.ɵɵelementStart(0, \"label\", 1);\n    ɵngcc0.ɵɵlistener(\"nzCheckedChange\", function NzCheckboxGroupComponent_label_0_Template_label_nzCheckedChange_0_listener($event) { const restoredCtx = ɵngcc0.ɵɵrestoreView(_r3); const o_r1 = restoredCtx.$implicit; const ctx_r2 = ɵngcc0.ɵɵnextContext(); return ctx_r2.onCheckedChange(o_r1, $event); });\n    ɵngcc0.ɵɵelementStart(1, \"span\");\n    ɵngcc0.ɵɵtext(2);\n    ɵngcc0.ɵɵelementEnd()();\n} if (rf & 2) {\n    const o_r1 = ctx.$implicit;\n    const ctx_r0 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"nzDisabled\", o_r1.disabled || ctx_r0.nzDisabled)(\"nzChecked\", o_r1.checked);\n    ɵngcc0.ɵɵadvance(2);\n    ɵngcc0.ɵɵtextInterpolate(o_r1.label);\n} }\nclass NzCheckboxWrapperComponent {\n    constructor(renderer, elementRef) {\n        this.nzOnChange = new EventEmitter();\n        this.checkboxList = [];\n        renderer.addClass(elementRef.nativeElement, 'ant-checkbox-group');\n    }\n    addCheckbox(value) {\n        this.checkboxList.push(value);\n    }\n    removeCheckbox(value) {\n        this.checkboxList.splice(this.checkboxList.indexOf(value), 1);\n    }\n    onChange() {\n        const listOfCheckedValue = this.checkboxList.filter(item => item.nzChecked).map(item => item.nzValue);\n        this.nzOnChange.emit(listOfCheckedValue);\n    }\n}\nNzCheckboxWrapperComponent.ɵfac = function NzCheckboxWrapperComponent_Factory(t) { return new (t || NzCheckboxWrapperComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };\nNzCheckboxWrapperComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NzCheckboxWrapperComponent, selectors: [[\"nz-checkbox-wrapper\"]], outputs: { nzOnChange: \"nzOnChange\" }, exportAs: [\"nzCheckboxWrapper\"], ngContentSelectors: _c0, decls: 1, vars: 0, template: function NzCheckboxWrapperComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵprojection(0);\n    } }, encapsulation: 2, changeDetection: 0 });\nNzCheckboxWrapperComponent.ctorParameters = () => [\n    { type: Renderer2 },\n    { type: ElementRef }\n];\nNzCheckboxWrapperComponent.propDecorators = {\n    nzOnChange: [{ type: Output }]\n};\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzCheckboxComponent {\n    constructor(elementRef, nzCheckboxWrapperComponent, cdr, focusMonitor, directionality) {\n        this.elementRef = elementRef;\n        this.nzCheckboxWrapperComponent = nzCheckboxWrapperComponent;\n        this.cdr = cdr;\n        this.focusMonitor = focusMonitor;\n        this.directionality = directionality;\n        this.dir = 'ltr';\n        this.destroy$ = new Subject();\n        this.onChange = () => { };\n        this.onTouched = () => { };\n        this.nzCheckedChange = new EventEmitter();\n        this.nzValue = null;\n        this.nzAutoFocus = false;\n        this.nzDisabled = false;\n        this.nzIndeterminate = false;\n        this.nzChecked = false;\n        this.nzId = null;\n        // TODO: move to host after View Engine deprecation\n        this.elementRef.nativeElement.classList.add('ant-checkbox-wrapper');\n    }\n    hostClick(e) {\n        e.preventDefault();\n        this.focus();\n        this.innerCheckedChange(!this.nzChecked);\n    }\n    innerCheckedChange(checked) {\n        if (!this.nzDisabled) {\n            this.nzChecked = checked;\n            this.onChange(this.nzChecked);\n            this.nzCheckedChange.emit(this.nzChecked);\n            if (this.nzCheckboxWrapperComponent) {\n                this.nzCheckboxWrapperComponent.onChange();\n            }\n        }\n    }\n    writeValue(value) {\n        this.nzChecked = value;\n        this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(disabled) {\n        this.nzDisabled = disabled;\n        this.cdr.markForCheck();\n    }\n    focus() {\n        this.focusMonitor.focusVia(this.inputElement, 'keyboard');\n    }\n    blur() {\n        this.inputElement.nativeElement.blur();\n    }\n    ngOnInit() {\n        var _a;\n        this.focusMonitor\n            .monitor(this.elementRef, true)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                Promise.resolve().then(() => this.onTouched());\n            }\n        });\n        if (this.nzCheckboxWrapperComponent) {\n            this.nzCheckboxWrapperComponent.addCheckbox(this);\n        }\n        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {\n            this.dir = direction;\n            this.cdr.detectChanges();\n        });\n        this.dir = this.directionality.value;\n    }\n    ngAfterViewInit() {\n        if (this.nzAutoFocus) {\n            this.focus();\n        }\n    }\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef);\n        if (this.nzCheckboxWrapperComponent) {\n            this.nzCheckboxWrapperComponent.removeCheckbox(this);\n        }\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n}\nNzCheckboxComponent.ɵfac = function NzCheckboxComponent_Factory(t) { return new (t || NzCheckboxComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NzCheckboxWrapperComponent, 8), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nNzCheckboxComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NzCheckboxComponent, selectors: [[\"\", \"nz-checkbox\", \"\"]], viewQuery: function NzCheckboxComponent_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c1, 7);\n    } if (rf & 2) {\n        let _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.inputElement = _t.first);\n    } }, hostVars: 4, hostBindings: function NzCheckboxComponent_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵlistener(\"click\", function NzCheckboxComponent_click_HostBindingHandler($event) { return ctx.hostClick($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-checkbox-wrapper-checked\", ctx.nzChecked)(\"ant-checkbox-rtl\", ctx.dir === \"rtl\");\n    } }, inputs: { nzValue: \"nzValue\", nzAutoFocus: \"nzAutoFocus\", nzDisabled: \"nzDisabled\", nzIndeterminate: \"nzIndeterminate\", nzChecked: \"nzChecked\", nzId: \"nzId\" }, outputs: { nzCheckedChange: \"nzCheckedChange\" }, exportAs: [\"nzCheckbox\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => NzCheckboxComponent),\n                multi: true\n            }\n        ])], attrs: _c2, ngContentSelectors: _c0, decls: 6, vars: 11, consts: [[1, \"ant-checkbox\"], [\"type\", \"checkbox\", 1, \"ant-checkbox-input\", 3, \"checked\", \"ngModel\", \"disabled\", \"ngModelChange\", \"click\"], [\"inputElement\", \"\"], [1, \"ant-checkbox-inner\"]], template: function NzCheckboxComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef();\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0)(1, \"input\", 1, 2);\n        ɵngcc0.ɵɵlistener(\"ngModelChange\", function NzCheckboxComponent_Template_input_ngModelChange_1_listener($event) { return ctx.innerCheckedChange($event); })(\"click\", function NzCheckboxComponent_Template_input_click_1_listener($event) { return $event.stopPropagation(); });\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelement(3, \"span\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵelementStart(4, \"span\");\n        ɵngcc0.ɵɵprojection(5);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-checkbox-checked\", ctx.nzChecked && !ctx.nzIndeterminate)(\"ant-checkbox-disabled\", ctx.nzDisabled)(\"ant-checkbox-indeterminate\", ctx.nzIndeterminate);\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"checked\", ctx.nzChecked)(\"ngModel\", ctx.nzChecked)(\"disabled\", ctx.nzDisabled);\n        ɵngcc0.ɵɵattribute(\"autofocus\", ctx.nzAutoFocus ? \"autofocus\" : null)(\"id\", ctx.nzId);\n    } }, directives: [ɵngcc3.CheckboxControlValueAccessor, ɵngcc3.NgControlStatus, ɵngcc3.NgModel], encapsulation: 2, changeDetection: 0 });\nNzCheckboxComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: NzCheckboxWrapperComponent, decorators: [{ type: Optional }] },\n    { type: ChangeDetectorRef },\n    { type: FocusMonitor },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nNzCheckboxComponent.propDecorators = {\n    inputElement: [{ type: ViewChild, args: ['inputElement', { static: true },] }],\n    nzCheckedChange: [{ type: Output }],\n    nzValue: [{ type: Input }],\n    nzAutoFocus: [{ type: Input }],\n    nzDisabled: [{ type: Input }],\n    nzIndeterminate: [{ type: Input }],\n    nzChecked: [{ type: Input }],\n    nzId: [{ type: Input }]\n};\n__decorate([\n    InputBoolean()\n], NzCheckboxComponent.prototype, \"nzAutoFocus\", void 0);\n__decorate([\n    InputBoolean()\n], NzCheckboxComponent.prototype, \"nzDisabled\", void 0);\n__decorate([\n    InputBoolean()\n], NzCheckboxComponent.prototype, \"nzIndeterminate\", void 0);\n__decorate([\n    InputBoolean()\n], NzCheckboxComponent.prototype, \"nzChecked\", void 0);\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzCheckboxGroupComponent {\n    constructor(elementRef, focusMonitor, cdr, directionality) {\n        this.elementRef = elementRef;\n        this.focusMonitor = focusMonitor;\n        this.cdr = cdr;\n        this.directionality = directionality;\n        this.onChange = () => { };\n        this.onTouched = () => { };\n        this.options = [];\n        this.nzDisabled = false;\n        this.dir = 'ltr';\n        this.destroy$ = new Subject();\n        // TODO: move to host after View Engine deprecation\n        this.elementRef.nativeElement.classList.add('ant-checkbox-group');\n    }\n    trackByOption(_, option) {\n        return option.value;\n    }\n    onCheckedChange(option, checked) {\n        option.checked = checked;\n        this.onChange(this.options);\n    }\n    ngOnInit() {\n        var _a;\n        this.focusMonitor\n            .monitor(this.elementRef, true)\n            .pipe(takeUntil(this.destroy$))\n            .subscribe(focusOrigin => {\n            if (!focusOrigin) {\n                Promise.resolve().then(() => this.onTouched());\n            }\n        });\n        (_a = this.directionality.change) === null || _a === void 0 ? void 0 : _a.pipe(takeUntil(this.destroy$)).subscribe((direction) => {\n            this.dir = direction;\n            this.cdr.detectChanges();\n        });\n        this.dir = this.directionality.value;\n    }\n    ngOnDestroy() {\n        this.focusMonitor.stopMonitoring(this.elementRef);\n        this.destroy$.next();\n        this.destroy$.complete();\n    }\n    writeValue(value) {\n        this.options = value;\n        this.cdr.markForCheck();\n    }\n    registerOnChange(fn) {\n        this.onChange = fn;\n    }\n    registerOnTouched(fn) {\n        this.onTouched = fn;\n    }\n    setDisabledState(disabled) {\n        this.nzDisabled = disabled;\n        this.cdr.markForCheck();\n    }\n}\nNzCheckboxGroupComponent.ɵfac = function NzCheckboxGroupComponent_Factory(t) { return new (t || NzCheckboxGroupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.Directionality, 8)); };\nNzCheckboxGroupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: NzCheckboxGroupComponent, selectors: [[\"nz-checkbox-group\"]], hostVars: 2, hostBindings: function NzCheckboxGroupComponent_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"ant-checkbox-group-rtl\", ctx.dir === \"rtl\");\n    } }, inputs: { nzDisabled: \"nzDisabled\" }, exportAs: [\"nzCheckboxGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            {\n                provide: NG_VALUE_ACCESSOR,\n                useExisting: forwardRef(() => NzCheckboxGroupComponent),\n                multi: true\n            }\n        ])], decls: 1, vars: 2, consts: [[\"nz-checkbox\", \"\", \"class\", \"ant-checkbox-group-item\", 3, \"nzDisabled\", \"nzChecked\", \"nzCheckedChange\", 4, \"ngFor\", \"ngForOf\", \"ngForTrackBy\"], [\"nz-checkbox\", \"\", 1, \"ant-checkbox-group-item\", 3, \"nzDisabled\", \"nzChecked\", \"nzCheckedChange\"]], template: function NzCheckboxGroupComponent_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵtemplate(0, NzCheckboxGroupComponent_label_0_Template, 3, 3, \"label\", 0);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵproperty(\"ngForOf\", ctx.options)(\"ngForTrackBy\", ctx.trackByOption);\n    } }, directives: [ɵngcc4.NgForOf, NzCheckboxComponent], encapsulation: 2 });\nNzCheckboxGroupComponent.ctorParameters = () => [\n    { type: ElementRef },\n    { type: FocusMonitor },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] }\n];\nNzCheckboxGroupComponent.propDecorators = {\n    nzDisabled: [{ type: Input }]\n};\n__decorate([\n    InputBoolean()\n], NzCheckboxGroupComponent.prototype, \"nzDisabled\", void 0);\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzCheckboxWrapperComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-checkbox-wrapper',\n                exportAs: 'nzCheckboxWrapper',\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                template: ` <ng-content></ng-content> `\n            }]\n    }], function () { return [{ type: ɵngcc0.Renderer2 }, { type: ɵngcc0.ElementRef }]; }, { nzOnChange: [{\n            type: Output\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzCheckboxComponent, [{\n        type: Component,\n        args: [{\n                selector: '[nz-checkbox]',\n                exportAs: 'nzCheckbox',\n                preserveWhitespaces: false,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                encapsulation: ViewEncapsulation.None,\n                template: `\n    <span\n      class=\"ant-checkbox\"\n      [class.ant-checkbox-checked]=\"nzChecked && !nzIndeterminate\"\n      [class.ant-checkbox-disabled]=\"nzDisabled\"\n      [class.ant-checkbox-indeterminate]=\"nzIndeterminate\"\n    >\n      <input\n        #inputElement\n        type=\"checkbox\"\n        class=\"ant-checkbox-input\"\n        [attr.autofocus]=\"nzAutoFocus ? 'autofocus' : null\"\n        [attr.id]=\"nzId\"\n        [checked]=\"nzChecked\"\n        [ngModel]=\"nzChecked\"\n        [disabled]=\"nzDisabled\"\n        (ngModelChange)=\"innerCheckedChange($event)\"\n        (click)=\"$event.stopPropagation()\"\n      />\n      <span class=\"ant-checkbox-inner\"></span>\n    </span>\n    <span><ng-content></ng-content></span>\n  `,\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => NzCheckboxComponent),\n                        multi: true\n                    }\n                ],\n                host: {\n                    '[class.ant-checkbox-wrapper-checked]': 'nzChecked',\n                    '[class.ant-checkbox-rtl]': `dir === 'rtl'`,\n                    '(click)': 'hostClick($event)'\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: NzCheckboxWrapperComponent, decorators: [{\n                type: Optional\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { nzCheckedChange: [{\n            type: Output\n        }], nzValue: [{\n            type: Input\n        }], nzAutoFocus: [{\n            type: Input\n        }], nzDisabled: [{\n            type: Input\n        }], nzIndeterminate: [{\n            type: Input\n        }], nzChecked: [{\n            type: Input\n        }], nzId: [{\n            type: Input\n        }], inputElement: [{\n            type: ViewChild,\n            args: ['inputElement', { static: true }]\n        }] }); })();\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzCheckboxGroupComponent, [{\n        type: Component,\n        args: [{\n                selector: 'nz-checkbox-group',\n                exportAs: 'nzCheckboxGroup',\n                preserveWhitespaces: false,\n                encapsulation: ViewEncapsulation.None,\n                template: `\n    <label\n      nz-checkbox\n      class=\"ant-checkbox-group-item\"\n      *ngFor=\"let o of options; trackBy: trackByOption\"\n      [nzDisabled]=\"o.disabled || nzDisabled\"\n      [nzChecked]=\"o.checked!\"\n      (nzCheckedChange)=\"onCheckedChange(o, $event)\"\n    >\n      <span>{{ o.label }}</span>\n    </label>\n  `,\n                providers: [\n                    {\n                        provide: NG_VALUE_ACCESSOR,\n                        useExisting: forwardRef(() => NzCheckboxGroupComponent),\n                        multi: true\n                    }\n                ],\n                host: {\n                    '[class.ant-checkbox-group-rtl]': `dir === 'rtl'`\n                }\n            }]\n    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc2.Directionality, decorators: [{\n                type: Optional\n            }] }]; }, { nzDisabled: [{\n            type: Input\n        }] }); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzCheckboxModule {\n}\nNzCheckboxModule.ɵfac = function NzCheckboxModule_Factory(t) { return new (t || NzCheckboxModule)(); };\nNzCheckboxModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NzCheckboxModule });\nNzCheckboxModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[BidiModule, CommonModule, FormsModule, A11yModule]] });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NzCheckboxModule, [{\n        type: NgModule,\n        args: [{\n                imports: [BidiModule, CommonModule, FormsModule, A11yModule],\n                declarations: [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent],\n                exports: [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NzCheckboxModule, { declarations: function () { return [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent]; }, imports: function () { return [BidiModule, CommonModule, FormsModule, A11yModule]; }, exports: function () { return [NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxWrapperComponent]; } }); })();\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzCheckboxComponent, NzCheckboxGroupComponent, NzCheckboxModule, NzCheckboxWrapperComponent };\n\n"],"names":[],"sourceRoot":"webpack:///"}
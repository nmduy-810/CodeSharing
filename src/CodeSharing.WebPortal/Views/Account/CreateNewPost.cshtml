@model CodeSharing.ViewModels.Contents.Post.PostCreateRequest

@{
    Layout = "_SubLayout";
    ViewData["Title"] = "Tạo mới bài viết · Code Sharing";
}

@section scripts{
    <script src="~/lib/ckeditor5-build-classic/ckeditor.js"></script>
    <script>
        class MyUploadAdapter {
            xhr;
            loader;
            constructor( loader ) {
                    // The file loader instance to use during the upload. It sounds scary but do not
                    // worry — the loader will be passed into the adapter later on in this guide.
                    this.loader = loader;
            }
            
            // Starts the upload process.
            upload() {
                return this.loader.file
                    .then( file => new Promise( ( resolve, reject ) => {
                        this._initRequest();
                        this._initListeners( resolve, reject, file );
                        this._sendRequest( file );
                    } ) );
            }
        
            // Aborts the upload process.
            abort() {
                if ( this.xhr ) {
                    this.xhr.abort();
                }
            }
            
            // Initializes the XMLHttpRequest object using the URL passed to the constructor.
            _initRequest() {
                const xhr = this.xhr = new XMLHttpRequest();
        
                // Note that your request may look different. It is up to you and your editor
                // integration to choose the right communication channel. This example uses
                // a POST request with JSON as a data structure but your configuration
                // could be different.
                xhr.open( 'POST', '@Url.Action("UploadImage", "Account")', true );
                xhr.responseType = 'json';
            }
            
            // Initializes XMLHttpRequest listeners.
            _initListeners( resolve, reject, file ) {
                const xhr = this.xhr;
                const loader = this.loader;
                const genericErrorText = `Couldn't upload file: ${ file.name }.`;
        
                xhr.addEventListener( 'error', () => reject( genericErrorText ) );
                xhr.addEventListener( 'abort', () => reject() );
                xhr.addEventListener( 'load', () => {
                    const response = xhr.response;
        
                    // This example assumes the XHR server's "response" object will come with
                    // an "error" which has its own "message" that can be passed to reject()
                    // in the upload promise.
                    //
                    // Your integration may handle upload errors in a different way so make sure
                    // it is done properly. The reject() function must be called when the upload fails.
                    if ( !response || response.error ) {
                        return reject( response && response.error ? response.error.message : genericErrorText );
                    }
        
                    // If the upload is successful, resolve the upload promise with an object containing
                    // at least the "default" URL, pointing to the image on the server.
                    // This URL will be used to display the image in the content. Learn more in the
                    // UploadAdapter#upload documentation.
                    resolve( {
                        default: response.url
                    } );
                } );
        
                // Upload progress when it is supported. The file loader has the #uploadTotal and #uploaded
                // properties which are used e.g. to display the upload progress bar in the editor
                // user interface.
                if ( xhr.upload ) {
                    xhr.upload.addEventListener( 'progress', evt => {
                        if ( evt.lengthComputable ) {
                            loader.uploadTotal = evt.total;
                            loader.uploaded = evt.loaded;
                        }
                    } );
                }
            }
            
            // Prepares the data and sends the request.
            _sendRequest( file ) {
                // Prepare the form data.
                const data = new FormData();
        
                data.append( 'upload', file );
        
                // Important note: This is the right place to implement security mechanisms
                // like authentication and CSRF protection. For instance, you can use
                // XMLHttpRequest.setRequestHeader() to set the request headers containing
                // the CSRF token generated earlier by your application.
        
                // Send the request.
                this.xhr.send( data );
            }
        }
        
        function MyCustomUploadAdapterPlugin( editor ) {
            editor.plugins.get( 'FileRepository' ).createUploadAdapter = ( loader ) => {
                // Configure the URL to the upload script in your back-end here!
                return new MyUploadAdapter( loader );
            };
        }
        
        ClassicEditor
            .create( document.querySelector( '#txt_content' ), {
                extraPlugins: [ MyCustomUploadAdapterPlugin ],
            })
            .then(editor => {
                window.editor = editor;
            })
            .catch( error => {
                console.error( error );
            } );
    </script>
}

<div class="section-header">
    <h3 class="section-title">Tạo mới bài viết</h3>
    <img src="~/images/wave.svg" class="wave" alt="wave" />
</div>

<form action="/Account/CreateNewPost" method="post" enctype="multipart/form-data" id="frm_new_post" class="post-form">
    <div class="messages">
        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    </div>
    
    <div class="row">
        <div class="column col-md-12">
            <!--Category-->
            <div class="form-group">
                <h6>Danh mục</h6>
                <select asp-for="CategoryId" style="height: 50px" required="required" class="form-control" asp-items="ViewBag.Categories"></select>
                <div class="help-block with-errors"></div>
            </div>
            
            <!--Title-->
            <div class="form-group">
                <h6>Tiêu đề</h6>
                @Html.TextBoxFor(model => model.Title, htmlAttributes: new { id = "form-control", required = "required", @class = " form-control" })
                <div class="help-block with-errors"></div>
            </div>
            
            <!--Summary-->
            <div class="form-group">
                <h6>Tổng quan</h6>
                @Html.TextBoxFor(model => model.Summary, htmlAttributes: new { id = "form-control", required = "required", @class = " form-control" })
                <div class="help-block with-errors"></div>
            </div>
            
            <!--Cover image-->
            <div class="form-group">
                <h6>Hình đại diện</h6>
                <input asp-for="CoverImage" type="file" accept="image/*" required="required">
                <div class="help-block with-errors"></div>
            </div>
            
            <!--Label-->
            <div class="form-group">
                <h6>Nhãn</h6>
                @Html.TextBoxFor(model => model.Labels, htmlAttributes: new { id = "form-control", required = "required", @class = " form-control" })
                <div class="help-block with-errors"></div>
            </div>
            
            <!--Note-->
            <div class="form-group">
                <h6>Ghi chú</h6>
                @Html.TextBoxFor(model => model.Note, htmlAttributes: new { id = "form-control", required = "required", @class = " form-control" })
                <div class="help-block with-errors"></div>
            </div>
            
            <!--Content-->
            <div class="form-group">
                <h6>Nội dung</h6>
                <textarea asp-for="Content" id="txt_content" required="required" class="form-control" rows="10"></textarea>
                <div class="help-block with-errors"></div>
            </div>
        </div>
    </div>
    
    <button type="submit" name="submit" id="submit" value="Submit" class="btn btn-default">Tạo mới</button>
    <!-- Send Button -->
</form>